#+TITLE: Emacs Configuration
#+AUTHOR: Bassam Saeed
#+PROPERTY: header-args  :comments both
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :tangle ~/.config/emacs/init.el

* Early Init
  Emacs 27 and above loads ~early-init.el~ before initializing certain
  graphical elements and the package manager. Utilizing this, we can
  speed up initial start.
  #+begin_src emacs-lisp :tangle ~/.config/emacs/early-init.el
    ;;; early-init.el --- For Emacs 27+

    ;;; Commentary:
    ;; Emacs 27+ loads this file before initializing certain graphical
    ;; elements and the package manager

    ;;; Code:

    ;; Clear out graphical elements
    (horizontal-scroll-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    ;; Set default fonts
    (set-face-attribute 'default nil :family "mononoki Nerd Font" :height 130)
    (set-face-attribute 'fixed-pitch nil :family "Iosevka")
    (set-face-attribute 'variable-pitch nil :family "B612" :width 'condensed)

    ;; Disable package manager init since we use straight.el instead
    (setq package-enable-at-startup nil)

    (provide 'early-init)

    ;;; early-init.el ends here
  #+end_src
* Native Compilation
  Using the Native comp version of emacs 28. This silences warnings by
  the compiler. They are super annoying when pop-ing up new windows.

  #+begin_src emacs-lisp :tangle (if (string-match-p "--with-nativecomp" system-configuration-options) "~/.config/emacs/init.el" "no")
    (setq comp-async-report-warnings-errors nil)
  #+end_src
* Straight.el
** Bootstrap
   Downloads and installs the [[https://github.com/raxod502/straight.el][  straight.el]] Emacs package manager as
   a replacement for the built in ~package.el~.
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+end_src
** Use-Package syntactic sugar
   Installs the [[https://github.com/jwiegley/use-package][  use-package]] macro and integrates it with ~straight.el~.
   #+begin_src emacs-lisp
     (straight-use-package 'use-package)
     (setq straight-use-package-by-default t)
   #+end_src
** Updates
   The easiest way to update all packages at once is by using
   ~straight-pull-all~. However there is a potential [[https://github.com/raxod502/straight.el/issues/323][  issue]] with
   this. It's not necessarily one I've ever encountered but good to
   keep in mind when updating.
* Custom File
  Store all settings from Customization interface in separate file
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))
  #+end_src
* General Help
** Which-Key
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src
* User Interface
** Basics
   #+begin_src emacs-lisp
     ;; Hide splash page
     (setq inhibit-startup-message t)

     ;; Put as many prompts in minibuffer as possible
     (setq use-dialog-box nil)

     ;; Show column number in modeline
     (column-number-mode t)

     ;; Highlight the line the cursor is on
     (global-hl-line-mode t)

     ;; Show time in modeline
     (display-time-mode t)

     ;; Change cursor to vertical line
     (setq-default cursor-type 'bar)

     ;; Set margins on all sides
     (push '(internal-border-width . 16) default-frame-alist)
   #+end_src
** Theme
   Srcery theme
   #+begin_src emacs-lisp
     (use-package srcery-theme
       :config
       (load-theme 'srcery t))
   #+end_src
** Icons
   On first setup, the icons need to be installed after evaluating the
   following s-expression with ~all-the-icons-install-fonts~.
   #+begin_src emacs-lisp
     (use-package all-the-icons)
   #+end_src
** Emojis
   #+begin_src emacs-lisp
     (use-package emojify
       :hook (after-init . global-emojify-mode))
   #+end_src
** Rainbow Mode
   When enabled, this minor mode sets the background colour of all
   strings to their colour name. e.g. #ff0000, the background would be
   displayed as red.
   #+begin_src emacs-lisp
     (use-package rainbow-mode)
   #+end_src
** Modeline
   Replace the built-in modeline with [[https://github.com/seagle0128/doom-modeline][  doom-modeline]].
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :init (doom-modeline-mode 1)
       :custom
       (doom-modeline-icon t)
       (doom-modeline-height 35))
   #+end_src
** Default Dashboard
   #+begin_src emacs-lisp
     (use-package dashboard
       :config
       (dashboard-setup-startup-hook)
       :custom
       (initial-buffer-choice
	(lambda ()
	  (get-buffer "*dashboard*"))))
   #+end_src
* Behaviour
** Basics
   #+begin_src emacs-lisp
     ;; Sane scrolling
     (setq scroll-conservatively 101)

     ;; Auto save all buffers when frame loses focus
     (add-hook 'focus-out-hook (lambda () (save-some-buffers t)))

     ;; Centralize backup files
     (setq backup-directory-alist `(("." . ,(expand-file-name "backup" user-emacs-directory)))
	   version-control t
	   kept-new-version 10
	   kept-old-versions 6)

     ;; Store autosave files in temp dir instead
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))

     ;; Delete old backup files automatically
     (setq delete-old-versions t)

     ;; Highlight matching parens
     (setq show-paren-delay 0
	   show-paren-when-point-inside-paren t)
     (show-paren-mode t)

     ;; Replaces selcted text rather than ignoring it and inserting on cursor
     (delete-selection-mode t)

     ;; Hide the cursor in inactive windows
     (setq cursor-in-non-selected-windows t)

     ;; Replace yes/no prompts with y/n
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Use ibuffer
     (defalias 'list-buffers 'ibuffer)

     ;; Async Shell commands
     (setq-default async-shell-command-display-buffer nil
		   async-shell-command-buffer 'new-buffer)
   #+end_src
*** Keybindings
    Generic keybinding for broad emacs functionality and custom
    functions
    #+begin_src emacs-lisp
      (defun open-config ()
	(interactive)
	(find-file (concat user-emacs-directory "init.org")))
      (define-key global-map (kbd "C-c d") 'open-config)
    #+end_src
** Ace-Window
   [[https://github.com/abo-abo/ace-window][ Ace-window]] is a much better way of traversing Emacs windows once
   you get more than 2.
   #+begin_src emacs-lisp
     (use-package ace-window
       :custom
       (aw-scope 'frame)
       :bind
       ("M-o" . ace-window)
       ([remap other-window] . ace-window))
   #+end_src
** Completion Framework
*** Selectrum
    The core incremental narrowing interface. Built on top of the
    existing Emacs ~completing-read~ API.
    #+begin_src emacs-lisp
      (use-package selectrum
	:config (selectrum-mode))
    #+end_src
*** Marginalia
    Provides nice little annotations to completion candidates.
    #+begin_src emacs-lisp
      (use-package marginalia
	:bind (:map minibuffer-local-map
		    ("M-A" . marginalia-cycle))
	:init (marginalia-mode)
	:custom (marginalia-annotators
		 '(marginalia-annotators-heavy marginalia-annotators-light nil)))
    #+end_src
*** Orderless
    A ~completion style~ that splits based off of spaces and matches
    candidates in any order.
    #+begin_src emacs-lisp
      (use-package orderless
	:custom (completion-styles '(orderless)))
    #+end_src
* Communications
** Telega
   :PROPERTIES:
   :header-args: :tangle (if (equal (system-name) "polaris") "~/.config/emacs/init.el" "no")
   :END:
   An unofficial Telegram client for Emacs.

   First we need to set up visual-fill-mode which is a dependency of [[https://github.com/zevlg/telega.el][
   telega.el]].
   #+begin_src emacs-lisp
     (use-package visual-fill-column)
   #+end_src

   Then we install and setup telega. The first time running it will
   require inputting your phone number.
   #+begin_src emacs-lisp
     (use-package telega
       :after visual-fill-column
       :commands (telega)
       :config
       (telega-notifications-mode 1)
       (add-hook 'telega-chat-mode-hook
		 (lambda ()
		   (set (make-local-variable 'comapny-backends)
			(append '(telega-company-emoji
				  telega-company-username
				  telega-company-hashtag)
				(when (telega-chat-bot-p telega-chatbuf--chat)
				  '(telega-company-botcmd))))
		   (company-mode 1))))
   #+end_src
* Programming
** Python
   
*** Poetry
    #+begin_src emacs-lisp :tangle no
      (use-package poetry
	:config
	(poetry-tracking-mode t))
    #+end_src
** Rust
   #+begin_src emacs-lisp
     (use-package rustic
       :bind (:map rustic-mode-map
		   ("M-?" . lsp-find-references)
		   ("M-." . lsp-find-definition)
		   ("C-c C-c l" . flycheck-list-errors)
		   ("C-c C-c a" . lsp-execute-code-action)
		   ("C-c C-c r" . lsp-rename)
		   ("C-c C-c q" . lsp-workspace-restart)
		   ("C-c C-c Q" . lsp-workspace-shutdown)
		   ("C-c C-c s" . lsp-rust-analyzer-status))
       :config
       (setq rustic-format-on-save t))
   #+end_src
** Elixir
   #+begin_src emacs-lisp
     (use-package elixir-mode)
   #+end_src
** Lua
   #+begin_src emacs-lisp
     (use-package lua-mode)
   #+end_src
** LSP
   Enable LSP mode for every programming buffer
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :config
       (setq lsp-keymap-prefix "C-c l")
       (lsp-enable-which-key-integration t)
       :hook
       (python-mode . lsp-deferred))

     (use-package lsp-ui
       :after lsp-mode
       :commands lsp-ui-mode
       :custom
       (lsp-ui-peek-always-show t)
       (lsp-ui-sideline-show-hover t)
       (lsp-ui-doc-position 'at-point)
       (lsp-eldoc-render-all t)
       :hook
       (lsp-mode . lsp-ui-mode))
   #+end_src
** Debugging
   Replace the built-in debugger with [[https://github.com/realgud/realgud][  RealGud]].
   #+begin_src emacs-lisp
     (use-package realgud
       :commands
       (realgud:pdb))
   #+end_src
* Org
  Not installing org-mode since we're using the built-in one but
  essentially requiring it first before we made specific changes.
  #+begin_src emacs-lisp
    ;; Beautify Org Src blocks
    (add-hook 'org-mode-hook (lambda ()
			       "Beautify Org Src blocks"
			       (push '("#+begin_src" . "λ") prettify-symbols-alist)
			       (push '("#+end_src" . "λ") prettify-symbols-alist)
			       (prettify-symbols-mode)))

    ;; All headings (*) use custom font
    (add-hook 'org-mode-hook
	      (lambda ()
		(dolist (org-headings org-level-faces)
		  (set-face-attribute org-headings nil :family "IBM Plex Sans"))))

    ;; Elimate org magic removing empty lines between headings when they're toggled closed
    (setq org-blank-before-new-entry '((heading . nil)
				       (plain-list-item . nil)))
    (setq org-cycle-separator-lines 1)

    ;; Enabling displaying images by default
    (setq org-startup-with-inline-images t)

    ;; Start spellchecker for every org buffer
    (add-hook 'org-mode-hook 'turn-on-flyspell)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (python . t)))

    ;; Set org-agenda files
    (setq org-agenda-files (quote ("~/doc/agenda/")))

    ;; Org Capture
    (setq org-capture-templates
	  `(("i" "inbox" entry (file "~/doc/agenda/inbox.org")
	     "* TODO %?")
	    ("c" "org-protocol-capture" entry (file "~/doc/agenda/inbox.org")
	     "* TODO [[%:link][%:description]]\n\n %i" :immediate-finish t)
	    ("p" "org-protocol-projects" entry (file "~/doc/notes/Projects.org")
	     "* TODO [[%:link][%:description]]\n\n %i" :immediate-finish t)))

    ;; Closing items
    (setq org-log-done 'note)

    ;; Enable org-habit
    (add-to-list 'org-modules 'org-habit t)

    ;; Remove / and * emphasis for italics and bold respectively
    (setq org-hide-emphasis-markers t)

    ;; Replace ... for hidden content with ⤵
    (setq org-ellipsis "⤵")

    ;; - List replaced with •
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Enable auto-fill mode (limit M-q)
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+end_src
** Keybindings
   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c o l") 'org-store-link)
     (define-key global-map (kbd "C-c o a") 'org-agenda-list)
     (define-key global-map (kbd "C-c o c") 'org-capture)
     (define-key global-map (kbd "C-c o b") 'org-iswitchb)
   #+end_src
** HTMLize
   [[https://github.com/hniksic/emacs-htmlize][ htmlize]] turns all buffer text and decorations to html. As far as
   I'm aware it's a requirement of org-publish to html which is what
   my custom blog setup is based on.
   #+begin_src emacs-lisp
     (use-package htmlize)
     ;; HTML5 export
     (setq org-html-html5-fancy t)
   #+end_src
** Org-superstar
   [[https://github.com/integral-dw/org-superstar-mode][ org-superstar]] is a modernized version of [[https://github.com/sabof/org-bullets][ org-bullets]] which
   prettifies org headings (and apparently lists).
   #+begin_src emacs-lisp
     (use-package org-superstar
       :after org
       :hook (org-mode . org-superstar-mode)
       :custom
       (org-hide-leading-stars t))
   #+end_src
** Org-protocol
   Simplifies capturing online reading material. Built on top of a
   custom org template. Since we're just using the built in Emacs one,
   we're not going to actually install it, just "require" it; hence
   ~:straight nil~.
   #+begin_src emacs-lisp
     (use-package org-protocol
       :straight nil)
   #+end_src
** Org links
   #+begin_src emacs-lisp
     ;; Differentiate between URL links and other links
     ;;(org-link-set-parameters "http" :face '(:box t))
     ;;(org-link-set-parameters "https" :face '(:box t))

     (defun org-link-make-external-string (orig-fun link description)
       "Add external link icon in DESCRIPTION when LINK is http(s).
     Then call ORIG-FUN."
       (if (or (string= (url-type (url-generic-parse-url link)) "http")
	       (string= (url-type (url-generic-parse-url link)) "https"))
	   (setq description (concat "  " description)))
       (apply orig-fun (list link description)))

     ;; All external links have icon appended to them
     (advice-add 'org-link-make-string :around #'org-link-make-external-string)
   #+end_src
** TODO Org-roam
   #+begin_src emacs-lisp :tangle no
     (use-package org-roam
       :config
       (setq org-roam-directory "~/doc/notes/")
       :bind (:map org-roam-mode-map
		   (("C-c n l" . org-roam)
		    ("C-c n f" . org-roam-find-file))
		   :map org-mode-map
		   (("C-c n i" . org-roam-insert))
		   (("C-c n I" . org-roam-insert-immediate))))
   #+end_src
* Blog
  Needed to generate RSS feeds
  #+begin_src emacs-lisp
    (use-package webfeeder)
  #+end_src

  #+begin_src emacs-lisp
    (use-package ox-publish
      :straight nil
      :config
      (setq bassamsaeed.ca/base-directory "~/src/bassamsaeed.ca/")
      (setq bassamsaeed.ca/header-file (concat bassamsaeed.ca/base-directory "partials/header.html"))
      (setq bassamsaeed.ca/footer-file (concat bassamsaeed.ca/base-directory "partials/footer.html"))

      (defun bassamsaeed.ca/header (_plist)
	"Header"
	(with-temp-buffer
	  (insert-file-contents bassamsaeed.ca/header-file)
	  (buffer-string)))
  
      (defun  bassamsaeed.ca/footer (_plist)
	"Footer"
	(with-temp-buffer
	  (insert-file-contents bassamsaeed.ca/footer-file)
	  (buffer-string)))

      (defun bassamsaeed.ca/filter-index-links (link backend info)
	"Convert index.html links to just their root directory"
	(if (org-export-derived-backend-p backend 'html)
	    (replace-regexp-in-string "/index.html" "/" link)))

      (defun bassamsaeed.ca/org-sitemap-format (title list)
	"Remove subtitle in posts index page"
	(let ((filtered-list (cl-remove-if (lambda (x)
					     (and (sequencep x) (null (car x))))
					   list)))
	  (concat "#+TITLE: " title "\n"
		  "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/main.css\">\n"
		  "#+HTML_HEAD: <link rel=\"alternate\" type=\"application/rss+xml\" href=\"/posts.rss\">\n"
		  "#+HTML_HEAD: <link rel=\"alternate\" type=\"application/atom+xml\" href=\"/posts.atom\">\n"
		  "#+HTML_HEAD: <style>.subtitle{display: none;}</style>\n"
	   (org-list-to-org filtered-list))))
  
      (defun bassamsaeed.ca/org-sitemap-format-entry (entry style project)
	""
	(format "%s /[[file:%s][%s]]/"
		(format-time-string "%b %d, %Y" (org-publish-find-date entry project))
		entry
		(org-publish-find-title entry project)))

      (defun bassamsaeed.ca/org-html-publish-to-html (plist filename pub-dir)
	"Wrapper function around org-html-publish-to-html to include Date in Title"
	(let ((project (cons 'rw plist)))
	  (plist-put plist :subtitle
		     (format-time-string "%b %d, %Y" (org-publish-find-date filename project)))
	  (org-html-publish-to-html plist filename pub-dir)))

      (defun bassamsaeed.ca/publish ()
	(interactive)
	(setq webfeeder-default-author "Bassam Saeed <bassam.saeed@gmail.com>")
	(webfeeder-build
	 "posts.atom"
	 (concat bassamsaeed.ca/base-directory "public")
	 "https://www.bassamsaeed.ca"
	 (delete "posts/index.html"
		 (mapcar (lambda (f) (replace-regexp-in-string ".*/public/" "" f))
			 (directory-files-recursively
			  (concat bassamsaeed.ca/base-directory "public/posts") "index.html")))
	 :title "Bassam Saeed's Blog"
	 :description "Personal Development Blog")
	(webfeeder-build
	 "posts.rss"
	 (concat bassamsaeed.ca/base-directory "public")
	 "https://www.bassamsaeed.ca"
	 (delete "posts/index.html"
		 (mapcar (lambda (f) (replace-regexp-in-string ".*/public/" "" f))
			 (directory-files-recursively
			  (concat bassamsaeed.ca/base-directory "public/posts") "index.html")))
	 :title "Bassam Saeed's Blog"
	 :description "Personal Development Blog"
	 :builder 'webfeeder-make-rss))
 
      (setq org-publish-project-alist
	    `(("posts"
	       :base-directory ,(concat bassamsaeed.ca/base-directory "posts/")
	       :publishing-directory ,(concat bassamsaeed.ca/base-directory "public/posts")
	       :base-extension "org"
	       :publishing-function bassamsaeed.ca/org-html-publish-to-html
	       :recursive t
	       :html-head
	       ,(concat
		"<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/main.css\">\n"
		"<link rel=\"alternate\" type=\"application/rss+xml\" href=\"/posts.rss\">\n"
		"<link rel=\"alternate\" type=\"application/atom+xml\" href=\"/posts.atom\">\n")
	       :html-head-include-default-style nil
	       :html-head-include-scripts nil
	       :html-preamble bassamsaeed.ca/header
	       :html-postamble bassamsaeed.ca/footer
	       :section-numbers nil
	       :with-toc nil
	       :auto-sitemap t
	       :sitemap-filename "index.org"
	       :sitemap-title "Posts"
	       :sitemap-style list
	       :sitemap-format-entry bassamsaeed.ca/org-sitemap-format-entry
	       :sitemap-function bassamsaeed.ca/org-sitemap-format
	       :sitemap-sort-files anti-chronologically)
	  
	      ("assets"
	       :base-directory ,(concat bassamsaeed.ca/base-directory "assets/")
	       :publishing-directory ,(concat bassamsaeed.ca/base-directory "public/")
	       :recursive t
	       :base-extension "css\\|svg\\|woff2"
	       :publishing-function org-publish-attachment)

	      ("static"
	       :base-directory ,(concat bassamsaeed.ca/base-directory "static/")
	       :publishing-directory ,(concat bassamsaeed.ca/base-directory "public/")
	       :base-extension "org"
	       :publishing-function org-html-publish-to-html
	       :recursive t
	       :html-head
	       ,(concat
		"<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/main.css\">\n"
		"<link rel=\"alternate\" type=\"application/rss+xml\" href=\"/posts.rss\">\n"
		"<link rel=\"alternate\" type=\"application/atom+xml\" href=\"/posts.atom\">\n")
	       :html-head-include-default-style nil
	       :html-head-include-scripts nil
	       :html-preamble bassamsaeed.ca/header
	       :html-postamble bassamsaeed.ca/footer
	       :section-numbers nil
	       :with-toc nil)
	  
	      ("website" :components ("posts" "assets" "static"))))
  
      (add-to-list 'org-export-filter-link-functions
		   'bassamsaeed.ca/filter-index-links))
  #+end_src
* Magit
  #+begin_src emacs-lisp
    (use-package magit
      :commands magit-status
      :bind (("C-x g" . magit-status)))
  #+end_src
** Forge
   Integrate common git forges (github and gitlab) into the magit
   interface.
   #+begin_src emacs-lisp
   #+end_src
* Company
  #+begin_src emacs-lisp
    (use-package company
      :custom
      (company-idle-delay 0)
      (company-minimum-prefix-length 1)
      :hook
      (prog-mode . company-mode))

    (use-package company-box
      :after company
      :hook (company-mode . company-box-mode))
  #+end_src
* Flycheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :commands flycheck-mode)
  #+end_src
* Additional Modes
** Fish
   I use fish as my primary shell. This is mostly used for the
   literate fish config, since I rarely ever edit them manually.
   #+begin_src emacs-lisp
     (use-package fish-mode)
   #+end_src
** Treemacs
   #+begin_src emacs-lisp
     (use-package treemacs
       :config
       (treemacs-follow-mode t)
       (treemacs-filewatch-mode t)

       :bind
       (:map global-map
	     ("C-x t t" . treemacs)))
   #+end_src
** YAML
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :mode
       ("\\.yml\\'"))
   #+end_src
** PDF
   #+begin_src emacs-lisp
     (use-package pdf-tools
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page)
       (setq pdf-annot-activate-crated-annotations t)
       :bind (:map pdf-view-mode-map
		   ("i" . pdf-view-midnight-minor-mode)
		   ("c" . pdf-annot-add-text-annotation)))
   #+end_src
** Feed Reader
   [[https://github.com/skeeto/elfeed][  Elfeed]] is an extensible feed reader for Emacs.
   #+begin_src emacs-lisp
     (use-package elfeed
       :bind
       ("C-x w" . elfeed))

     (use-package elfeed-org
       :after elfeed
       :config
       (elfeed-org))

     (use-package elfeed-goodies
       :after elfeed
       :config
       (elfeed-goodies/setup))

     (use-package elfeed-protocol
       :after elfeed)
   #+end_src
** Deft
   [[https://jblevins.org/projects/deft/][ Deft]] allows for quickly browsing, filtering and editing
   plain-text notes (org usually).
   #+begin_src emacs-lisp
     (use-package deft
       :after org
       :bind ("C-c n d" . deft)
       :commands (deft)
       :config
       (setq deft-directory "~/doc/notes")
       (setq deft-recursive t)
       (setq deft-default-extension "org")
       (setq deft-use-filename-as-title t)
       (setq deft-use-filter-string-for-filename t))
   #+end_src
** Dired
   Using built-in dired
   #+begin_src emacs-lisp
     (use-package dired
       :straight nil
       :bind (:map dired-mode-map
		   ;; by default the binding for mouse-2 is
		   ;; 'dired-mouse-find-file-other-window
		   ([mouse-2] . 'dired-mouse-find-file))
       :custom
       ;; Human readable file sizes
       (dired-listing-switches "-lha")
  
       ;; Colourful columns
       (use-package diredfl
	 :config
	 (diredfl-global-mode 1)))
   #+end_src
** vterm
   An alternative Emacs terminal built on top libvterm. Need to figure
   out a way to automate colours.
   #+begin_src emacs-lisp :tangle (if (equal (system-name) "polaris") "~/.config/emacs/init.el" "no")
     (use-package vterm
       :config
       (setq vterm-shell "/usr/bin/fish")
       :hook (vterm-mode . (lambda ()
			     (setq-local global-hl-line-mode nil))))
   #+end_src
* Local Variables
  This local variable for eval will automatically tangle this file
  whenever it's saved. This means it will create the appropriate ~.el~
  files for Emacs configuration which manual work needed.
  # Local Variables:
  # eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t)
  # End:
  
